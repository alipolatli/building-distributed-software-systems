// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using listing.infrastructure.Data.EFCore;

#nullable disable

namespace listing.infrastructure.Migrations
{
    [DbContext(typeof(EFListingDbContext))]
    [Migration("20240418181047_InitialCreate_2")]
    partial class InitialCreate_2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("listing.core.Domain.EFCore.Class1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Ahmet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Class1s");
                });

            modelBuilder.Entity("listing.core.Domain.EFCore.SaleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer")
                        .HasColumnName("brand_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<int>("ShippingId")
                        .HasColumnType("integer")
                        .HasColumnName("shipping_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<Guid>("tenant_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("sale_items", (string)null);
                });

            modelBuilder.Entity("listing.core.Domain.EFCore.StockItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ASIN")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("asin");

                    b.Property<decimal>("DiscountRate")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("discount_rate");

                    b.Property<string>("GTIN")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("gtin");

                    b.Property<decimal>("ListPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)")
                        .HasColumnName("list_price");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint")
                        .HasColumnName("quantity");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sku");

                    b.Property<int>("SaleItemId")
                        .HasColumnType("integer");

                    b.Property<decimal>("VatRate")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("vat_rate");

                    b.Property<Guid>("tenant_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasAlternateKey("SKU");

                    b.HasIndex("SaleItemId");

                    b.ToTable("stock_items", (string)null);
                });

            modelBuilder.Entity("listing.core.Domain.EFCore.StockItemAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("integer")
                        .HasColumnName("attribute_id");

                    b.Property<int>("AttributeValueId")
                        .HasColumnType("integer")
                        .HasColumnName("attribute_value_id");

                    b.Property<int>("StockItemId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_item_id");

                    b.Property<Guid>("tenant_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StockItemId");

                    b.ToTable("stock_item_attributes", (string)null);
                });

            modelBuilder.Entity("listing.core.Domain.EFCore.StockItemMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("StockItemId")
                        .HasColumnType("integer")
                        .HasColumnName("stock_item_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("url");

                    b.Property<Guid>("tenant_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StockItemId");

                    b.ToTable("stock_item_medias", (string)null);
                });

            modelBuilder.Entity("listing.core.Domain.EFCore.StockItem", b =>
                {
                    b.HasOne("listing.core.Domain.EFCore.SaleItem", null)
                        .WithMany("StockItems")
                        .HasForeignKey("SaleItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("listing.core.Domain.EFCore.StockItemAttribute", b =>
                {
                    b.HasOne("listing.core.Domain.EFCore.StockItem", null)
                        .WithMany("Attributes")
                        .HasForeignKey("StockItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("listing.core.Domain.EFCore.StockItemMedia", b =>
                {
                    b.HasOne("listing.core.Domain.EFCore.StockItem", null)
                        .WithMany("Medias")
                        .HasForeignKey("StockItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("listing.core.Domain.EFCore.SaleItem", b =>
                {
                    b.Navigation("StockItems");
                });

            modelBuilder.Entity("listing.core.Domain.EFCore.StockItem", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Medias");
                });
#pragma warning restore 612, 618
        }
    }
}
